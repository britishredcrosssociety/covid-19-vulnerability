import numpy as np
import pandas as pd
import geopandas as gpd
import os
from scipy.spatial import cKDTree

############
#
# Globals & Functions
#
############
data_dir = ".\\data"

GBcrs = {"init":"epsg:27700"}

# OS Open Roads accessed from: https://www.ordnancesurvey.co.uk/opendatadownload/products.html
open_roads_dir = os.path.join(data_dir, "OS Open Roads")

# Hospital Names and Locations: https://data.gov.uk/dataset/f4420d1c-043a-42bc-afbc-4c0f7d3f1620/hospitals
hosp_data_dir = os.path.join(data_dir, "hospital_data")
hospitals_file = "Hospital.csv"

# LSOA 2011 Pop Weighted Centroids: https://geoportal.statistics.gov.uk/datasets/lower-layer-super-output-areas-december-2011-population-weighted-centroids
lsoa_pop_weighted_centroids_file = "Lower_Layer_Super_Output_Areas_December_2011_Population_Weighted_Centroids.csv"

# taken from: https://gis.stackexchange.com/questions/222315/geopandas-find-nearest-point-in-other-dataframe
def ckdnearest(gdA, gdB):
	'''For twp GeoDataFames containing Point type geometries only, for each Point in gdA
	find the Point in gdB that is closest
	'''
    nA = np.array(list(zip(gdA.geometry.x, gdA.geometry.y)) )
    nB = np.array(list(zip(gdB.geometry.x, gdB.geometry.y)) )
    btree = cKDTree(nB)
    dist, idx = btree.query(nA, k=1)
    gdf = pd.concat(
        [gdA.reset_index(drop=True), gdB.loc[idx, gdB.columns != 'geometry'].reset_index(drop=True),
         pd.Series(dist, name='dist')], axis=1)
    return gdf

##############
#
# Read and clean data
#
##############
dfHospitals = pd.read_csv(os.path.join(hosp_data_dir, hospitals_file), delimiter="Â¬")
dfLSOACent = pd.read_csv(os.path.join(data_dir, lsoa_pop_weighted_centroids_file))

# Create geometries from coordinates in the Hospitals and LSOA Centroids data
gdfHospitals = gpd.GeoDataFrame(dfHospitals, geometry=gpd.points_from_xy(dfHospitals.Longitude, dfHospitals.Latitude), crs = "EPSG:4326")
gdfHospitals = gdfHospitals.to_crs(GBcrs)
gdfHospitals.dropna(subset = ['Latitude','Longitude'], inplace = True)

gdfLSOACent = gpd.GeoDataFrame(dfLSOACent, geometry = gpd.points_from_xy(dfLSOACent.X, dfLSOACent.Y), crs = "EPSG:27700")

# Open Roads Data

'''
# Combine mutiple OS Road Nodes files into a single geodataframe
road_node_files = [i for i in os.listdir(open_roads_dir) if "RoadNode.shp" in i]
gdfRoadNodes = gpd.GeoDataFrame()
for f in road_node_files:
	gdf = gpd.read_file(os.path.join(open_roads_dir, f))
	gdf['file'] = f
	gdfRoadNodes = pd.concat([gdfRoadNodes, gdf])
gdfRoadNodes = gdfRoadNodes.to_crs(GBcrs)
gdfRoadNodes.to_file(os.path.join(data_dir, "OS Open Road Nodes.shp"))
'''
gdfRoadNodes = gpd.read_file(os.path.join(data_dir, "OS Open Road Nodes.shp"))


'''
road_link_files = [i for i in os.listdir(open_roads_dir) if "RoadLink.shp" in i]

gdfRoadLinks = gpd.GeoDataFrame()
for f in road_link_files:
	gdf = gpd.read_file(os.path.join(open_roads_dir, f))
	gdfRoadLinks = pd.concat([gdfRoadLinks, gdf])
gdfRoadLinks = gdfRoadLinks.to_crs(GBcrs)
gdfRoadLinks.to_file(os.path.join(data_dir,"OS Open Road Links.shp"))

gdfRoadLinks = gpd.read_file(os.path.join(data_dir,"OS Open Road Links.shp"))
'''

##############
#
# Find nearest road node to each hospital and LSOA centroid
#
##############

# Find nearest road nodes to hospitals and lsoa centroids
gdfHospitalsNodes = ckdnearest(gdfHospitals, gdfRoadNodes)
gdfLSOACentNodes = ckdnearest(gdfLSOACent, gdfRoadNodes)


# save this data, to be used to find distances between LSOA Centroids and nearest n Hospitals
gdfHospitalsNodes.loc[:,['OrganisationCode','identifier','file','dist']].to_csv(os.path.join(data_dir,"hospital_road_nodes.csv"))
gdfLSOACentNodes.loc[:,['lsoa11cd','identifier','file', 'dist']].to_csv(os.path.join(data_dir,"lsoa_road_nodes.csv"))


########################
#
# Use road network to find distances to nearest hospitals
#
########################


import pandana as pdna


'''
gdfRoadNodes = gpd.read_file(os.path.join(data_dir, "OS Open Road Nodes.shp"))
gdfRoadLinks = gpd.read_file(os.path.join(data_dir,"OS Open Road Links.shp"))

# Extract the road network topology from the gis data
dfNodes = pd.DataFrame({"identifier":gdfRoadNodes.identifier, "x": gdfRoadNodes.geometry.x, "y":gdfRoadNodes.geometry.y})
dfNodes.set_index("identifier", inplace=True)
dfLinks = gdfRoadLinks.loc[:, ['startNode', 'endNode', 'length']]
dfNodes.to_csv(os.path.join(data_dir, "OS Open Road Nodes.csv"))
dfLinks.to_csv(os.path.join(data_dir, "OS Open Road Links.csv"))
gdfRoadNodes = None
gdfRoadLinks = None
'''
dfNodes = pd.read_csv(os.path.join(data_dir, "OS Open Road Nodes.csv"))
dfLinks = pd.read_csv(os.path.join(data_dir, "OS Open Road Links.csv"))

dfNodes.drop_duplicates(inplace=True)
dfNodes.set_index('identifier', inplace=True)

gdfHospitals.set_index('OrganisationCode', inplace = True)

net=pdna.Network(dfNodes["x"], dfNodes["y"], dfLinks["startNode"], dfLinks["endNode"], dfLinks[["length"]])

# Can then get the nearest 3 hospitals to each LSOA centroid
buffer_dist = 200000
net.set_pois("hospitals", buffer_dist, 3, gdfHospitals.geometry.x, gdfHospitals.geometry.y)
dfNear = net.nearest_pois(buffer_dist,"hospitals", num_pois=3, include_poi_ids=True)


# Get just the LSOA centroids and their nearest hospitals
dfNearLSOACentroids = dfNear.reset_index()
dfNearLSOACentroids = pd.merge(dfNearLSOACentroids, dfLSOACentNodes, on = 'identifier', how = 'inner')

# Compute distance to nearest hospital and average distance to nearest 3 hospitals
dfNearLSOACentroids['distance_nearest_hospital'] = dfNearLSOACentroids[1]
dfNearLSOACentroids['mean_distance_nearest_three_hospitals'] = dfNearLSOACentroids.loc[:,[1,2,3]].mean(axis = 1)

# Check that all LSOAs have three nearest hospitals
assert dfNearLSOACentroids['poi3'].isnull().any() == False

dfNearLSOACentroids.to_csv(os.path.join(data_dir, "lsoa_nearest_hospitals.csv"), index=False)