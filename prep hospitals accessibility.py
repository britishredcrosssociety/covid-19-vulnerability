import numpy as np
import pandas as pd
import geopandas as gpd
import os
from scipy.spatial import cKDTree

############
#
# Globals & Functions
#
############
data_dir = ".\\data"

GBcrs = {"init":"epsg:27700"}

# OS Open Roads accessed from: https://www.ordnancesurvey.co.uk/opendatadownload/products.html
open_roads_dir = os.path.join(data_dir, "OS Open Roads")

# Hospital Names and Locations: https://data.gov.uk/dataset/f4420d1c-043a-42bc-afbc-4c0f7d3f1620/hospitals
hosp_data_dir = os.path.join(data_dir, "hospital_data")
hospitals_file = "Hospital.csv"

# Wards 2019 boundaries
ward_boundaries = "Wards_December_2019_Boundaries_UK_BGC.shp"

# Island wards to exclude - Isle of Scily and Wight wards
island_ward_boundaries = "Wards_December_2019_Boundaries_Scily_Wight_BGC.shp"

##############
#
# Read and clean data
#
##############
dfHospitals = pd.read_csv(os.path.join(hosp_data_dir, hospitals_file), delimiter="Â¬")

# Create geometries from coordinates in the Hospitals and LSOA Centroids data
gdfHospitals = gpd.GeoDataFrame(dfHospitals, geometry=gpd.points_from_xy(dfHospitals.Longitude, dfHospitals.Latitude), crs = "EPSG:4326")
gdfHospitals = gdfHospitals.to_crs(GBcrs)
gdfHospitals.dropna(subset = ['Latitude','Longitude'], inplace = True)

# Load ward boundaries and get ward centroids
gdfWards = gpd.read_file(os.path.join(data_dir, "Wards_December_2019_Boundaries_UK_BGC", ward_boundaries))
gdfWards = gdfWards.to_crs(GBcrs)

# Load island wards - selected manually using QGIS
gdfWardsIsland = gpd.read_file(os.path.join(data_dir, "Wards_December_2019_Boundaries_Scily_Wight_BGC", island_ward_boundaries))
gdfWardsIsland = gdfWardsIsland.to_crs(GBcrs)

# Only work with England and Wales wards for now
gdfWards = gdfWards.loc[ (gdfWards['WD19CD'].map(lambda s: s[0] =='E')) | (gdfWards['WD19CD'].map(lambda s: s[0] =='W'))]

# Exclude Isles of Scily and Isle of Whight for now - need to add in ferry crossings to connect with road network
gdfWards = gdfWards.loc[~gdfWards['WD19CD'].isin(gdfWardsIsland['WD19CD'])]

gdfWardsCent = gdfWards.copy()
gdfWardsCent['geometry'] = gpd.points_from_xy(gdfWardsCent.LONG, gdfWardsCent.LAT)
gdfWardsCent.crs = {"init":'epsg:4326'}
gdfWardsCent = gdfWardsCent.to_crs(GBcrs)
gdfWardsCent.to_file(os.path.join(data_dir, "Wards_December_2019_Boundaries_UK_BGC", "ward_centroids.shp"))

# Open Roads Data

# commented out because once data files have been combined and saved as a single file, this section
# of code doesn't need to be executed

'''
# Combine mutiple OS Road Nodes files into a single geodataframe
road_node_files = [i for i in os.listdir(open_roads_dir) if "RoadNode.shp" in i]
gdfRoadNodes = gpd.GeoDataFrame()
for f in road_node_files:
    gdf = gpd.read_file(os.path.join(open_roads_dir, f))
    gdf['file'] = f
    gdfRoadNodes = pd.concat([gdfRoadNodes, gdf])
gdfRoadNodes = gdfRoadNodes.to_crs(GBcrs)
gdfRoadNodes.to_file(os.path.join(data_dir, "OS Open Road Nodes.shp"))
'''

'''
road_link_files = [i for i in os.listdir(open_roads_dir) if "RoadLink.shp" in i]

gdfRoadLinks = gpd.GeoDataFrame()
for f in road_link_files:
    gdf = gpd.read_file(os.path.join(open_roads_dir, f))
    gdfRoadLinks = pd.concat([gdfRoadLinks, gdf])
gdfRoadLinks = gdfRoadLinks.to_crs(GBcrs)
gdfRoadLinks.to_file(os.path.join(data_dir,"OS Open Road Links.shp"))
'''

########################
#
# Use road network to find distances to nearest hospitals
#
########################

import networkx as nx
import pandana as pdna

# Extract the road network topology from the gis data
print("Loading network topology")
'''
# commented out because once network topology has been extracted from open road gis data this section doesn't need tp be executed

gdfRoadNodes = gpd.read_file(os.path.join(data_dir, "OS Open Road Nodes.shp"))
gdfRoadLinks = gpd.read_file(os.path.join(data_dir,"OS Open Road Links.shp"))

dfNodes = pd.DataFrame({"identifier":gdfRoadNodes.identifier, "x": gdfRoadNodes.geometry.x, "y":gdfRoadNodes.geometry.y})
dfNodes.set_index("identifier", inplace=True)
dfLinks = gdfRoadLinks.loc[:, ['startNode', 'endNode', 'length']]
dfNodes.to_csv(os.path.join(data_dir, "OS Open Road Nodes.csv"))
dfLinks.to_csv(os.path.join(data_dir, "OS Open Road Links.csv"))
gdfRoadNodes = None
gdfRoadLinks = None
'''
dfNodes = pd.read_csv(os.path.join(data_dir, "OS Open Road Nodes.csv"))
dfLinks = pd.read_csv(os.path.join(data_dir, "OS Open Road Links.csv"))

dfNodes.drop_duplicates(inplace=True)
dfNodes.set_index('identifier', inplace=True)

gdfHospitals.set_index('OrganisationCode', inplace = True)

# Get largest connected component
print("Finding largest connected component")
edges = dfLinks.loc[:,['startNode','endNode','length']].values
G = nx.Graph()
G.add_weighted_edges_from(edges)
largest_connected_component = sorted(nx.connected_components(G), key = len, reverse=True)[0]

# Clean up to save memory
G = None
edges = None

# Create pandana network. It's much faster for nearest point-of-interest analysis
print("Creating Network")

# Filter nodes and edges to just include those in the largest connected componet
dfLinksLCC = dfLinks.loc[(dfLinks['startNode'].isin(largest_connected_component)) & (dfLinks['endNode'].isin(largest_connected_component))]
dfNodesLCC = dfNodes.loc[largest_connected_component]

net=pdna.Network(dfNodesLCC["x"], dfNodesLCC["y"], dfLinksLCC["startNode"], dfLinksLCC["endNode"], dfLinksLCC[["length"]])
#net.save_hdf5(os.path.join(data_dir, "pandana_network.h5"))

# Can then get the nearest 3 hospitals to each LSOA centroid
print("Finding nearest hospitals")
search_distance = 200000
net.set_pois("hospitals", search_distance, 3, gdfHospitals.geometry.x, gdfHospitals.geometry.y)
dfNear = net.nearest_pois(search_distance,"hospitals", num_pois=3, include_poi_ids=True)

# Select only the Wards centroids and their nearest hospitals rather than every road node
ward_road_nodes = net.get_node_ids(gdfWardsCent.geometry.x, gdfWardsCent.geometry.y)
dfNearestHospitals = dfNear.loc[ward_road_nodes]

# Include Ward codes
gdfWardsCent['ward_road_node'] = ward_road_nodes

dfNearestHospitals.reset_index(inplace=True)
dfNearestHospitals = pd.merge(dfNearestHospitals, gdfWardsCent, left_on = 'identifier', right_on = 'ward_road_node', how = 'outer', indicator = True)
assert gdfWardsCent.shape[0] == dfNearestHospitals.shape[0]

# Check each LSOA Centroid has nearest 3 hospitals and
print("Checking hospitals found")
assert dfNearestHospitals['_merge'].value_counts()['left_only'] == 0
assert dfNearestHospitals['_merge'].value_counts()['right_only'] == 0
assert dfNearestHospitals['poi1'].isnull().any() == False
assert dfNearestHospitals['poi2'].isnull().any() == False
assert dfNearestHospitals['poi3'].isnull().any() == False


#########################
#
# Clearing up and making output more presentable
#
#########################

# Compute average distance to nearest 3 hospitals
print("Formatting and saving data")
dfNearestHospitals['mean_distance_nearest_three_hospitals'] = dfNearestHospitals.loc[:,[1,2,3]].mean(axis = 1)

dfNearestHospitals = dfNearestHospitals.reindex(columns = [   'WD19CD','WD19NM','ward_road_nodes',
                                                                1,2,3,'poi1','poi2','poi3',
                                                                'mean_distance_nearest_three_hospitals'])

dfNearestHospitals = dfNearestHospitals.rename(columns = {1:'distance1',2:'distance2',3:'distance3',
                                                            'poi1':'hospital1','poi2':'hospital2','poi3':'hospital3',
                                                            'ward_road_nodes':'ward_centroid_road_node'})

dfNearestHospitals.to_csv(os.path.join(data_dir, "ward_nearest_hospitals.csv"), index=False)


####################
#
# Make a map
#
###################
print("Creating map")
from matplotlib import pyplot as plt
gdfWards = gdfWards.merge(dfNearestHospitals, left_on = 'WD19CD',right_on = 'WD19CD', how = 'inner')
f, ax = plt.subplots(1,1)
legend_info ={'label': "Mean distance to nearest 3 hospitals (m)"}
gdfWards.plot(column = 'mean_distance_nearest_three_hospitals', ax = ax, legend = True, legend_kwds = legend_info)
plt.axis('off')
f.savefig(os.path.join(data_dir, 'ward_hospital_distance_map.png'))
