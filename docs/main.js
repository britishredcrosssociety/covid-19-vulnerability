// Create map
function setup(){
    const map = new mapboxgl.Map({
        container: 'map',
        style: carto.basemaps.voyager,
        center: [0, 53],
        zoom: 5
    });

    const nav = new mapboxgl.NavigationControl({
        showCompass: false
    });
    map.addControl(nav, 'top-left');

    // Define pop-up
    const popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false,
        offset: 5
    });

    // Define user
    carto.setDefaultAuth({
        username: 'tomalrussell',
        apiKey: 'default_public'
    });

    // Define layer
    const source = new carto.source.Dataset('lad_all');
    const viz = new carto.Viz(`
        @name: $lad18nm
        @code: $lad18cd

        @deprivation_q: $deprivation_q
        @prop_top20: $prop_top20

        @clinical_risk: $clinical_risk
        @chd: $estimated_prevalence_of_chd
        @pad: $estimated_prevalence_of_peripheral_arterial_disease
        @hf: $estimated_prevalence_of_heart_failure
        @copd: $estimated_prevalence_of_copd

        @population_0: $population_0
        @population_10: $population_10
        @population_20: $population_20
        @population_30: $population_30
        @population_40: $population_40
        @population_50: $population_50
        @population_60: $population_60
        @population_70: $population_70
        @population_80: $population_80

        color: ramp(linear($deprivation_q + $clinical_risk,1,10),pinkyl)
    `);
    const layer = new carto.Layer('layer', source, viz);

    // Define interactivity
    const interactivity = new carto.Interactivity(layer);
    const delay = 50;
    let clickedFeatureId = null;

    interactivity.on('featureEnter', event => {
        event.features.forEach(feature => {
            if (feature.id !== clickedFeatureId) {
                feature.order.blendTo(9999, delay);
                feature.strokeWidth.blendTo(3, delay);
            }
        });
    });

    interactivity.on('featureLeave', event => {
        event.features.forEach(feature => {
            if (feature.id !== clickedFeatureId) {
                feature.order.reset(delay);
                feature.strokeWidth.reset(delay);
            }
        });
    });

    interactivity.on('featureHover', (e) => {
        if (!clickedFeatureId){
            updatePopup(e);
        }
    });
    interactivity.on('featureClick',  (event) => {
        if (event.features.length > 0) {
            const vars = event.features[0].variables;
            clickedFeatureId = vars.code.value;
            updatePopup(event);
        } else {
            clickedFeatureId = null;
            popup.remove();
        }
    });


    function updatePopup(event) {
        if (event.features.length > 0) {
            const vars = event.features[0].variables;
            popup.setHTML(`
                <div>
                    <h3 class ="h3">${vars.name.value}</h3>

                    <dl>
                        <dt>Clinical vulnerability</dt>
                        <dd>${vars.clinical_risk.value} (5 is worst)</dd>

                        <dt>Social vulnerability</dt>
                        <dd>${vars.deprivation_q.value} (5 is worst)</dd>
                    </dl>
                </div>
            `);

            popup.setLngLat([event.coordinates.lng, event.coordinates.lat]);
            if (!popup.isOpen()) {
                popup.addTo(map);
            }

            var sidebar = document.getElementById('sidebar-detail');

            sidebar.innerHTML = `
            <dl>
                <dt>COPD prevalence</dt>
                <dd>${vars.copd.value.toFixed(1)}%</dd>
                <dt>Coronary heart disease prevalence</dt>
                <dd>${vars.chd.value.toFixed(1)}%</dd>
                <dt>Heart failure prevalance</dt>
                <dd>${vars.hf.value.toFixed(1)}%</dd>
                <dt>Peripheral arterial disease prevalence</dt>
                <dd>${vars.pad.value.toFixed(1)}%</dd>
                <dt>Neighbourhoods in 20% most-deprived</dt>
                <dd>${(vars.prop_top20.value * 100).toFixed(1)}%</dd>
            </dl>
            `;

            // Assign the specification to a local variable chart_spec.
            var chart_spec = {
                $schema: 'https://vega.github.io/schema/vega-lite/v4.json',
                width: 200,
                height: 150,
                data: {
                    values: [
                        {age: '0-10', pop: vars.population_0.value },
                        {age: '10-20', pop: vars.population_10.value },
                        {age: '20-30', pop: vars.population_20.value },
                        {age: '30-40', pop: vars.population_30.value },
                        {age: '40-50', pop: vars.population_40.value },
                        {age: '50-60', pop: vars.population_50.value },
                        {age: '60-70', pop: vars.population_60.value },
                        {age: '70-80', pop: vars.population_70.value },
                        {age: '80+', pop: vars.population_80.value }
                    ]
                },
                mark: 'bar',
                encoding: {
                    y: {
                        field: 'pop',
                        type: 'quantitative',
                        axis: {'title': 'Number of people'}
                    },
                    x: {
                        field: 'age',
                        type: 'nominal',
                        axis: {'title': 'Age'}
                    }
                }
            };

            // Embed the visualization in the container with id `vis`
            vegaEmbed('#population-histogram', chart_spec,  {
                actions: false
            });
        } else {
            popup.remove();
        }
    }

    layer.addTo(map, 'watername_ocean');
    layer.on('loaded', () => {
        hideLoader();

        // setLegend(layer);
    });
}

function setLegend(layer) {
    const colorLegend = layer.viz.color.getLegendData({
        othersLabel: 'Default',
        samples: 5
    });
    let colorLegendList = '';

    colorLegend.data.forEach((legend) => {
        const colorHex = rgbToHex(legend.value);
        const bucket = legend.key.toFixed(0);

        colorLegendList +=
            `<li><span class="polygon-mark" style="background-color:${colorHex};"></span> <span>${bucket}</span></li>\n`;
    });

    document.getElementById('legend').innerHTML = colorLegendList;
}

function hideLoader() {
    document.getElementById('loader').style.opacity = '0';
}

function rgbToHex(color) {
    return "#" + ((1 << 24) + (color.r << 16) + (color.g << 8) + color.b).toString(16).slice(1);
}

// Run setup
document.addEventListener('DOMContentLoaded', setup);
